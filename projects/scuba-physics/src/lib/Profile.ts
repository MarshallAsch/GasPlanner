import { Options } from './BuhlmannAlgorithm';
import { DepthConverter, DepthConverterFactory } from './depth-converter';
import { Gas } from './Gases';
import { Segment } from './Segments';

export enum EventType {
    noAction = 0,
    /** Generic error which prevents algorithm calculation */
    error = 1,
    /** Gas switch happened at this moment */
    gasSwitch = 2,
    /** At this moment, diver reached end of no deco limit */
    reachedNoDeco = 3,
    /** when breathing gas at this depth, it leads to Hypoxia */
    lowPpO2 = 3,
    /** breathing gas with high ppO2 can lead to oxygen toxicity */
    highPpO2 = 4
}

export class Event {
    /** The number of seconds since dive begin the event occurred */
    public timeStamp: number;
    /** depth in meters, at which the diver was, when the event occurred */
    public depth: number;
    /** purpose of the event to happen */
    public type: EventType;
    /** Optional explanation of the event or empty string */
    public message?: string;
    /** Optional data associated with the event, e.g. Gas for gas switch */
    public data?: any;
}

export class EventsFactory {
    public static createGasSwitch(timeStamp: number, depth: number, gas: Gas): Event {
        return {
            timeStamp: timeStamp,
            depth: depth,
            type: EventType.gasSwitch,
            data: gas
        };
    }

    public static createError(message: string): Event {
        return {
            timeStamp: 0,
            depth: 0,
            type: EventType.error,
            message: message
        };
    }

    public static createLowPpO2(depth: number): Event {
        return {
            timeStamp: 0,
            depth: depth,
            type: EventType.lowPpO2
        };
    }

    public static createHighPpO2(depth: number): Event {
        return {
            timeStamp: 0,
            depth: depth,
            type: EventType.highPpO2
        };
    }
}

export class Events {
    public items: Event[] = [];

    public add(event: Event): void {
       this.items.push(event);
    }
}

/** all values in bar */
class PressureSegment {
    constructor(
        public startDepth: number,
        public endDepth: number
    ) {}
    
    public get minDepth(): number {
        return Math.min(this.startDepth, this.endDepth)
    }

    public get maxDepth(): number {
        return Math.max(this.startDepth, this.endDepth)
    }
}

class EventsContext {
    public events: Events = new Events();
    public elapsed = 0;
    // alow add these events only once
    public addedHighPpO2 = false;
    public addedLowPpO2 = false;
    public index = 0;

    constructor(private profile: Segment[], public depthConverter: DepthConverter, private options: Options) {}

    private get previous(): Segment {
        if(this.index > 0) {
            return this.profile[this.index - 1];
        }

        return null;
    }

    public get maxPpo(): number {
        const previous = this.previous;
        
        // TODO multilevel dives: for ascent use deco ppO2 limit instead - doesn't have to be enough
        if(!!previous && previous.startDepth > this.current.startDepth) {
            return this.options.maxDecoPpO2;
        }

        return this.options.maxPpO2;
    };

    public get current(): Segment {
        return this.profile[this.index];
    }

    public get next(): Segment {
        if(this.index < this.profile.length - 1) {
            return this.profile[this.index + 1];
        }

        return null;
    }
}

/** Creates events from profile generated by the algorithm */
export class ProfileEvents {
    public static fromProfile(profile: Segment[], options: Options): Events {
        const depthConverter = new DepthConverterFactory(options).create();
        const context = new EventsContext(profile, depthConverter, options);

        for(context.index = 0; context.index < profile.length; context.index++){
            
            // nice to have calculate exact time and depth of the events, it is enough it happened
            const pressureSegment = this.toPressureSegment(context.current, depthConverter);
            this.addHighPpO2(context, pressureSegment);
            this.addLowPpO2(context, pressureSegment);

            context.elapsed += context.current.duration;
            // add after current, because it happens on beginning of next segment
            this.addGasSwitch(context);
        }      
        
        return context.events;
    }

    private static addGasSwitch(context: EventsContext): void {
        const nextSegment = context.next;
        if(!!nextSegment) {
            if(!context.current.gas.compositionEquals(nextSegment.gas)) {
                const gasSwitch = EventsFactory.createGasSwitch(context.elapsed, nextSegment.startDepth, nextSegment.gas);
                context.events.add(gasSwitch);
            }
        }
    }

    private static toPressureSegment(segment: Segment, depthConverter: DepthConverter) {
        const startPressure = depthConverter.toBar(segment.startDepth);
        const endPressure = depthConverter.toBar(segment.endDepth);
        return new PressureSegment(startPressure, endPressure);
    }

    private static addHighPpO2(context: EventsContext, pressureSegment: PressureSegment): void {
        if(context.addedHighPpO2) {
            return;
        }

        const gasMod = context.current.gas.mod(context.maxPpo);

        if (pressureSegment.maxDepth > gasMod) {
            const highDepth = context.depthConverter.fromBar(gasMod);
            const highPpO2Event = EventsFactory.createHighPpO2(highDepth);
            context.events.add(highPpO2Event);
            context.addedHighPpO2 = true;
        }
    }

    private static addLowPpO2(context: EventsContext, segment: PressureSegment): void {
        if(context.addedLowPpO2) {
            return;
        }
        
        const gasCeiling = context.current.gas.ceiling(context.depthConverter.surfacePressure);

        if (gasCeiling > segment.minDepth) {
            const lowDepth = context.depthConverter.fromBar(gasCeiling);
            const lowPpO2Event = EventsFactory.createLowPpO2(lowDepth);
            context.events.add(lowPpO2Event);
            context.addedLowPpO2 = true;
        }
    }

}

/**
 * Dive definition point in moment during the dive.
 */
export class Ceiling {
    /**
     * Gets or sets moment in seconds during the dive
     */
    public time: number;

    /**
     * Gets or sets the maximum safe depth to ascent to.
     */
    public depth: number;
}

/**
 * Result of the Algorithm calculation
 */
export class CalculatedProfile {
    /**
     * Not null collection of segments filled whole dive profile.
     */
    public get segments(): Segment[] {
        return this.seg;
    }

    /**
     * Not null collection of ceilings.
     */
    public get ceilings(): Ceiling[] {
       return this.ceil;
    }

    private constructor(private seg: Segment[], private ceil: Ceiling[]) { }


    public static fromProfile(segments: Segment[], ceilings: Ceiling[]) {
        return new CalculatedProfile(segments, ceilings);
    }
}
